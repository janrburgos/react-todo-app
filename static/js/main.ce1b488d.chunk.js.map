{"version":3,"sources":["components/TodoAppInput/TodoAppInput.js","components/TaskRow/TaskRow.js","components/TaskTable/TaskTable.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","tasks","dispatch","addPendingTask","input","type","payload","useState","setInput","errorMessage","setErrorMessage","submitHandler","inputTask","trim","toLowerCase","document","querySelector","focus","undefined","find","task","name","className","htmlFor","onChange","e","target","value","onKeyPress","key","id","onClick","changeStatus","deleteTask","props","status","filter","length","map","App","initialState","uuidv4","reducer","state","action","newArray","push","doneTask","editedArray","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"uTA8EeA,eAbS,SAAC,GACvB,MAAO,CACLC,MAFmC,EAAZA,UAMA,SAACC,GAC1B,MAAO,CACLC,eAAgB,SAACC,GAAD,OACdF,EAAS,CAAEG,KAAM,mBAAoBC,QAASF,QAIrCJ,EA1EM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOE,EAAqB,EAArBA,eAC7B,EAA0BI,mBAAS,IAAnC,mBAAOH,EAAP,KAAcI,EAAd,KACA,EAAwCD,mBAAS,IAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KAMMC,EAAgB,WACpB,IAAIC,EAAYR,EAAMS,OAAOC,cAI7B,OAHAJ,EAAgB,IAChBK,SAASC,cAAc,SAASC,QAEd,KAAdL,GACFF,EAAgB,6BACTF,EAAS,UAC2CU,IAAlDjB,EAAMkB,MAAK,SAACC,GAAD,OAAUA,EAAKC,OAAST,KACrCF,EAAgB,kCAGzBF,EAAS,SACTL,EAAeS,KAGjB,OACE,sBAAKU,UAAU,eAAf,UACE,qBAAKA,UAAU,cAAf,SACE,2CAEF,sBAAKA,UAAU,WAAf,UACE,uBAAOC,QAAQ,OAAf,uBAGA,uBACEC,SA9Ba,SAACC,GACpBjB,EAASiB,EAAEC,OAAOC,QA8BZC,WAAY,SAACH,GACG,UAAVA,EAAEI,KACJlB,KAGJN,KAAK,OACLyB,GAAG,OACHH,MAAOvB,IAIT,qBAAKkB,UAAU,gBAAf,SAAgCb,IAGhC,wBACEsB,QAAS,WACPpB,KAFJ,iCCfOX,G,YAAAA,YAAQ,MAPI,SAACE,GAC1B,MAAO,CACL8B,aAAc,SAACF,GAAD,OAAQ5B,EAAS,CAAEG,KAAM,gBAAiBC,QAASwB,KACjEG,WAAY,SAACH,GAAD,OAAQ5B,EAAS,CAAEG,KAAM,cAAeC,QAASwB,QAIlD9B,EAnCC,SAACkC,GACf,OACE,oBAAIZ,UAAU,UAAd,SACE,+BACGY,EAAMd,KAAKC,KAEW,YAAtBa,EAAMd,KAAKe,QACV,wBACEb,UAAU,eACVS,QAAS,WACPG,EAAMF,aAAaE,EAAMd,KAAKU,KAHlC,oBAUF,wBACER,UAAU,aACVS,QAAS,kBAAMG,EAAMD,WAAWC,EAAMd,KAAKU,KAF7C,mCC0BO9B,eAdS,SAAC,GACvB,MAAO,CACLC,MAFmC,EAAZA,UAMA,SAACC,GAC1B,MAAO,CACLC,eAAgB,SAACC,GAAD,OACdF,EAAS,CAAEG,KAAM,mBAAoBC,QAASF,KAChD6B,WAAY,SAACH,GAAD,OAAQ5B,EAAS,CAAEG,KAAM,cAAeC,QAASwB,QAIlD9B,EA1CG,SAACkC,GACjB,OACE,IADKA,EAAMjC,MAAMmC,QAAO,SAAChB,GAAD,OAAUA,EAAKe,SAAWD,EAAMC,UAAQE,OAGhE,qBAAKf,UAAU,YAAf,SACE,8BACE,uCAAUY,EAAMC,OAAhB,gBAKJ,wBAAOb,UAAU,YAAjB,UACE,gCACE,6BACE,uCAAQY,EAAMC,OAAd,gBAGJ,gCACGD,EAAMjC,MACJmC,QAAO,SAAChB,GAAD,OAAUA,EAAKe,SAAWD,EAAMC,UACvCG,KAAI,SAAClB,GAAD,OACH,cAAC,EAAD,CAAuBA,KAAMA,GAAfA,EAAKU,eCVhBS,EAVH,WACV,OACE,sBAAKjB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWa,OAAO,YAClB,cAAC,EAAD,CAAWA,OAAO,a,8BCRlBK,EAAe,CACnBvC,MAAO,CACL,CAAE6B,GAAIW,cAAUpB,KAAM,MAAOc,OAAQ,WACrC,CAAEL,GAAIW,cAAUpB,KAAM,OAAQc,OAAQ,WACtC,CAAEL,GAAIW,cAAUpB,KAAM,QAASc,OAAQ,UAqC5BO,EAjCC,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAChD,OAAQA,EAAOvC,MACb,IAAK,mBACH,IAAIwC,EAAQ,YAAOF,EAAM1C,OAEzB,OADA4C,EAASC,KAAK,CAAEhB,GAAIW,cAAUpB,KAAMuB,EAAOtC,QAAS6B,OAAQ,YACrD,2BACFQ,GADL,IAEE1C,MAAM,YAAK4C,KAEf,IAAK,cACH,OAAO,2BACFF,GADL,IAEE1C,MAAM,YAAK0C,EAAM1C,MAAMmC,QAAO,SAAChB,GAAD,OAAUA,EAAKU,KAAOc,EAAOtC,cAE/D,IAAK,gBACH,IAAIyC,EAAWJ,EAAM1C,MAAMkB,MAAK,SAACC,GAAD,OAAUA,EAAKU,KAAOc,EAAOtC,WAC7DyC,EAASZ,OAAS,OAClB,IAAIa,EAAcL,EAAM1C,MAAMmC,QAC5B,SAAChB,GAAD,OAAUA,EAAKU,KAAOc,EAAOtC,WAG/B,OADA0C,EAAYF,KAAKC,GACV,2BACFJ,GADL,IAEE1C,MAAM,YAAK+C,KAGf,QACE,OAAO,eACFL,KCjCIM,EAFDC,YAAYR,GCK1BS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJlC,SAASuC,eAAe,W","file":"static/js/main.ce1b488d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TodoAppInput.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst TodoAppInput = ({ tasks, addPendingTask }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const addTaskInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    let inputTask = input.trim().toLowerCase();\r\n    setErrorMessage(\"\");\r\n    document.querySelector(\"input\").focus();\r\n\r\n    if (inputTask === \"\") {\r\n      setErrorMessage(\"please input a valid task\");\r\n      return setInput(\"\");\r\n    } else if (tasks.find((task) => task.name === inputTask) !== undefined) {\r\n      return setErrorMessage(\"this task is already existing\");\r\n    }\r\n\r\n    setInput(\"\");\r\n    addPendingTask(inputTask);\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoAppInput\">\r\n      <div className=\"app-heading\">\r\n        <p>New Task</p>\r\n      </div>\r\n      <div className=\"app-body\">\r\n        <label htmlFor=\"text\">Task Name</label>\r\n\r\n        {/* Input box */}\r\n        <input\r\n          onChange={addTaskInput}\r\n          onKeyPress={(e) => {\r\n            if (e.key === \"Enter\") {\r\n              submitHandler();\r\n            }\r\n          }}\r\n          type=\"text\"\r\n          id=\"text\"\r\n          value={input}\r\n        />\r\n\r\n        {/* Place for error message */}\r\n        <div className=\"error-message\">{errorMessage}</div>\r\n\r\n        {/* Add task button */}\r\n        <button\r\n          onClick={() => {\r\n            submitHandler();\r\n          }}\r\n        >\r\n          + Add Task\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ tasks }) => {\r\n  return {\r\n    tasks,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPendingTask: (input) =>\r\n      dispatch({ type: \"ADD_PENDING_TASK\", payload: input }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoAppInput);\r\n","import \"./TaskRow.css\";\nimport { connect } from \"react-redux\";\n\nconst TaskRow = (props) => {\n  return (\n    <tr className=\"TaskRow\">\n      <td>\n        {props.task.name}\n        {/* only show check button on pending tasks */}\n        {props.task.status === \"pending\" && (\n          <button\n            className=\"check-button\"\n            onClick={() => {\n              props.changeStatus(props.task.id);\n            }}\n          >\n            &#10003;\n          </button>\n        )}\n        {/* trash can button visible on all tasks */}\n        <button\n          className=\"bin-button\"\n          onClick={() => props.deleteTask(props.task.id)}\n        >\n          &#x1F5D1;\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeStatus: (id) => dispatch({ type: \"CHANGE_STATUS\", payload: id }),\n    deleteTask: (id) => dispatch({ type: \"DELETE_TASK\", payload: id }),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(TaskRow);\n","import \"./TaskTable.css\";\nimport TaskRow from \"../TaskRow/TaskRow\";\nimport { connect } from \"react-redux\";\n\nconst TaskTable = (props) => {\n  return props.tasks.filter((task) => task.status === props.status).length ===\n    0 ? (\n    // if no tasks in this table, show this message\n    <div className=\"TaskTable\">\n      <div>\n        <span>no {props.status} tasks</span>\n      </div>\n    </div>\n  ) : (\n    // if there is a task in this table, show tasks\n    <table className=\"TaskTable\">\n      <thead>\n        <tr>\n          <th>{`${props.status} tasks`}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.tasks\n          .filter((task) => task.status === props.status)\n          .map((task) => (\n            <TaskRow key={task.id} task={task} />\n          ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    tasks,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPendingTask: (input) =>\n      dispatch({ type: \"ADD_PENDING_TASK\", payload: input }),\n    deleteTask: (id) => dispatch({ type: \"DELETE_TASK\", payload: id }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskTable);\n","import \"./App.css\";\n\nimport TodoAppInput from \"./components/TodoAppInput/TodoAppInput\";\nimport TaskTable from \"./components/TaskTable/TaskTable\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <TodoAppInput />\n      <TaskTable status=\"pending\" />\n      <TaskTable status=\"done\" />\n    </div>\n  );\n};\n\nexport default App;\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst initialState = {\r\n  tasks: [\r\n    { id: uuidv4(), name: \"eat\", status: \"pending\" },\r\n    { id: uuidv4(), name: \"code\", status: \"pending\" },\r\n    { id: uuidv4(), name: \"sleep\", status: \"done\" },\r\n  ],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_PENDING_TASK\":\r\n      let newArray = [...state.tasks];\r\n      newArray.push({ id: uuidv4(), name: action.payload, status: \"pending\" });\r\n      return {\r\n        ...state,\r\n        tasks: [...newArray],\r\n      };\r\n    case \"DELETE_TASK\":\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks.filter((task) => task.id !== action.payload)],\r\n      };\r\n    case \"CHANGE_STATUS\":\r\n      let doneTask = state.tasks.find((task) => task.id === action.payload);\r\n      doneTask.status = \"done\";\r\n      let editedArray = state.tasks.filter(\r\n        (task) => task.id !== action.payload\r\n      );\r\n      editedArray.push(doneTask);\r\n      return {\r\n        ...state,\r\n        tasks: [...editedArray],\r\n      };\r\n\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}